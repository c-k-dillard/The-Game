swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/"
tags:
- name: "lobby"
  description: "Operations concerning lobbies"
- name: "user"
  description: "Operations concerning users"
schemes:
- "https"
- "http"
paths:
  /lobby/create:
    post:
      tags:
      - "lobby"
      summary: "Creates a new lobby"
      description: "Creates a new lobby"
      operationId: "createLobby"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Information about the lobby"
        required: true
        schema:
          $ref: "#/definitions/Selection"
      responses:
        200:
          description: ""
  /lobby/edit:
    put:
      tags:
      - "lobby"
      summary: "Edits a currently existing lobby"
      description: "Edits a currently existing lobby"
      operationId: "editLobby"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "What needs to be edited in the lobby"
        required: true
        schema:
          $ref: '#/definitions/Selection'
      responses:
        200:
          description: "Operation successful"
  /lobby/{lobbyName}:
    get:
      tags:
      - "lobby"
      summary: "Retrieves a lobby"
      description: "Find a lobby by its name"
      operationId: "getLobby"
      produces:
      - "application/json"
      parameters:
      - name: "lobbyName"
        in: "path"
        description: "Name of lobby"
        required: true
        type: "string"
      responses:
        200:
          description: "Operation successful"
        400:
          description: "Invalid lobby name"
        404:
          description: "Lobby not found"
  /lobby/list:
    get:
      summary: "List all lobbies"
      description: ""
      operationId: "listLobbies"
      produces:
      - "appliation/json"
      parameters:
      - name: "lobbyName"
        in: "query"
        description: "Filter by lobby name"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200: 
          description: "Operation successful"
        404:
          description: "Lobby name not found"
  /lobby/test:
    get:
      summary: "test"
      description: "test"
      operationId: "lobbyTest"
      produces:
      - "application/json"
      responses:
        200:
          description: "Operation successful"
  /votes/submit:
    post:
      tags:
      - "votes"
      summary: "Send votes to backend"
      description: ""
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created votes object"
        required: true
        schema:
          $ref: "#/definitions/Votes"
      responses:
        default:
          description: "Operation successful"
definitions:
  Selection:
    type: "object"
    properties:
      lobbyName:
        type: "string"
      options:
        type: "array"
        items: 
          type: "string"
  Votes:
    type: "object"
    properties:
      lobbyName:
        type: "string"
      user:
        type: "string"
      selectrion: 
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"